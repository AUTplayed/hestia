group 'at.karriere'


buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.5.RELEASE")
        classpath "gradle.plugin.at.karriere.gradle.plugins:karriere-version:1.3.0"
    }
}

apply plugin: "at.karriere.version"

apply plugin: 'java'
apply plugin: 'spring-boot'
sourceCompatibility = 1.8
targetCompatibility = 1.8

springBoot {
    executable = true
}

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        java {
            srcDir 'src/integrationTest/java'
        }
        resources {
            srcDir 'src/integrationTest/resources'
        }
        compileClasspath += sourceSets.test.compileClasspath
        runtimeClasspath += sourceSets.test.runtimeClasspath
    }
}


jar {
    baseName = 'hestia'
    def implementationVersion = version
    version = ''
    manifest {
        attributes("Implementation-Title": "Hestia",
                "Implementation-Version": implementationVersion)
    }
}

dependencies {
    testCompile 'junit:junit:4.+'
    testCompile 'org.assertj:assertj-joda-time:2.0.0'
    testCompile 'org.springframework.boot:spring-boot-starter-test:1.4.0.RELEASE'
    compile 'com.fasterxml.jackson.core:jackson-core:2.8.7'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.7'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.8.7'
    compile 'org.springframework.boot:spring-boot-starter-web:1.4.0.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-aop:1.4.0.RELEASE'
    compile 'org.apache.logging.log4j:log4j-api:2.6.2'
    compile 'org.apache.logging.log4j:log4j-core:2.6.2'
    compile 'io.sentry:sentry-log4j2:1.4.0'
    compile group: 'redis.clients', name: 'jedis', version: '2.9.0'
    compile group: 'com.spotify', name: 'docker-client', version: '8.8.3'
    compile group: 'org.json', name: 'json', version: '20170516'

}


task integrationTest(type: Test) {
    group = 'verification'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

integrationTest {
    afterTest { descriptor, result ->
        def className = descriptor.getClassName()
        if (className != null) {
            className = className.substring(className.lastIndexOf(".") + 1)
        }
        logger.lifecycle("IT: " + className + "." + descriptor.getName() + " (" + result.getResultType() + ")")
    }
}

test {
    afterTest { descriptor, result ->
        def className = descriptor.getClassName()
        if (className != null) {
            className = className.substring(className.lastIndexOf(".") + 1)
        }
        logger.lifecycle("Test: " + className + "." + descriptor.getName() + " (" + result.getResultType() + ")")
    }
}
